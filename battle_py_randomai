import random
from .poke2 import Pokemon, PokemonFactory
from .items import PotionFlyweightFactory 
from .pokeball import RegularPokeball, GreatBall, UltraBall, MasterBall, Pokeball
from .bag import Bag

def display_pokemon_stats(pokemon):
    print(f"{pokemon.name} | HP: {pokemon.current_health}/{pokemon.max_health} | Level: {pokemon.level}")

def battle_loop(bag, wild_pokemon):
    player_pokemon = bag.get_active_pokemon()
    if not player_pokemon:
        print("No active Pokemon to battle with!")
        return False

    print(f"\nA wild {wild_pokemon.name} appeared!")

    while True:
        player_pokemon = bag.get_active_pokemon()
        if not player_pokemon:
            viable_pokemon = get_viable_pokemon(bag)
            if viable_pokemon:
                force_switch_pokemon(bag, viable_pokemon)
                player_pokemon = bag.get_active_pokemon()
            else:
                print("All your Pokemon have fainted!")
                return False

        if wild_pokemon.is_fainted():
            print(f"Wild {wild_pokemon.name} fainted!")
            return True

        print("\nYour Pokemon:")
        display_pokemon_stats(player_pokemon)
        print("Wild Pokemon:")
        display_pokemon_stats(wild_pokemon)

        print("\n--- Battle Menu ---")
        print("1. Attack")
        print("2. Bag")
        print("3. Switch Pokemon")
        print("4. Run")
        choice = input("Choose an action: ")

        # Dodge resets every turn
        used_dodge = False

        if choice == "1":
            print("\nChoose your attack or dodge:")
            for idx, attack in enumerate(player_pokemon.known_attacks):
                print(f"{idx + 1}. {attack['name']} (Damage: {attack['damage']})")
            print(f"{len(player_pokemon.known_attacks) + 1}. Dodge (30% chance to avoid next attack)")
            try:
                attack_choice = int(input("Enter your choice: ")) - 1
                if attack_choice == len(player_pokemon.known_attacks):
                    print(f"{player_pokemon.name} prepares to dodge!")
                    used_dodge = True
                elif 0 <= attack_choice < len(player_pokemon.known_attacks):
                    result = player_pokemon.attack(attack_choice, wild_pokemon)
                    print(result['message'])
                    if result.get('evolved'):
                        print(f"Your {player_pokemon.name} evolved into {result['evolved'].name}!")
                        for ball in bag.compartments["pokemon"].items:
                            if isinstance(ball, Pokeball) and ball.get_pokemon() == player_pokemon:
                                ball.captured_pokemon = result["evolved"]
                                break
                else:
                    print("Invalid choice.")
                    continue
            except ValueError:
                print("Invalid input.")
                continue

        elif choice == "2":
            result = use_bag(bag, player_pokemon, wild_pokemon)
            if result == "caught":
                print(f"You caught {wild_pokemon.name}!")
                return True
            elif not result:
                continue

        elif choice == "3":
            if switch_pokemon(bag, player_pokemon):
                player_pokemon = bag.get_active_pokemon()
            else:
                continue

        elif choice == "4":
            if random.random() < 0.7:
                print("You ran away safely!")
                return None
            else:
                print("Failed to run!")

        else:
            print("Invalid choice!")
            continue

        # Wild PokÃ©mon turn
        if not wild_pokemon.is_fainted():
            wild_attack_idx = random.randint(0, len(wild_pokemon.known_attacks) - 1)
            attack_name = wild_pokemon.known_attacks[wild_attack_idx]['name']
            print(f"Wild {wild_pokemon.name} used {attack_name}!")

            if used_dodge and random.random() < 0.3:
                print(f"Your {player_pokemon.name} dodged the attack!")
            else:
                if used_dodge:
                    print("Dodge failed!")
                result = wild_pokemon.attack(wild_attack_idx, player_pokemon)
                print(f"You took {result['damage']} damage!")
                if player_pokemon.is_fainted():
                    print(f"{player_pokemon.name} fainted!")
                    viable_pokemon = get_viable_pokemon(bag)
                    if viable_pokemon:
                        force_switch_pokemon(bag, viable_pokemon)
                    else:
                        print("All your Pokemon have fainted!")
                        return False

def use_bag(bag, player_pokemon, wild_pokemon):
    while True:
        print("\n--- Bag ---")
        print("1. Medicine")
        print("2. Pokeballs")
        print("3. Back")
        bag_choice = input("Choose an option: ")

        if bag_choice == "1":
            return handle_potions(bag, player_pokemon)
        elif bag_choice == "2":
            return handle_pokeballs(bag, wild_pokemon)
        elif bag_choice == "3":
            return False
        else:
            print("Invalid choice.")

def handle_potions(bag, player_pokemon):
    if bag.count_items("potion") == 0:
        print("You don't have any potions!")
        return False
    
    print("\nAvailable Potions:")
    for idx, potion in bag.open_bag()["potion"]:
        print(f"{idx + 1}. {potion.get_name()}")
    
    potion_choice = input(f"Choose a potion (1-{bag.count_items('potion')}) or 0 to go back: ")
    if potion_choice == "0":
        return False
    
    try:
        potion_idx = int(potion_choice) - 1
        if 0 <= potion_idx < bag.count_items("potion"):
            result = bag.use_potion(potion_idx, player_pokemon)
            print(result['message'])
            return True
        else:
            print("Invalid potion choice!")
    except ValueError:
        print("Please enter a number.")
    return False

def handle_pokeballs(bag, wild_pokemon):
    if bag.count_items("pokeballs") == 0:
        print("You don't have any Pokeballs!")
        return False
    
    print("\nAvailable Pokeballs:")
    for idx, ball in bag.open_bag()["pokeballs"]:
        print(f"{idx + 1}. {ball.get_name()}")
    
    ball_choice = input(f"Choose a Pokeball (1-{bag.count_items('pokeballs')}) or 0 to go back: ")
    if ball_choice == "0":
        return False
    
    try:
        ball_idx = int(ball_choice) - 1
        if 0 <= ball_idx < bag.count_items("pokeballs"):
            if input("Do you want to try to catch the wild Pokemon? (y/n): ").lower() == "y":
                result = bag.use_pokeball(ball_idx, wild_pokemon)
                print(result['message'])
                if result['success']:
                    return "caught"
                return True
        else:
            print("Invalid Pokeball choice!")
    except ValueError:
        print("Please enter a number.")
    return False

def switch_pokemon(bag, current_pokemon):
    if bag.count_items("pokemon") <= 1:
        print("You don't have any other Pokemon to switch to!")
        return False
    
    print("\nChoose a Pokemon to switch to:")
    switch_options = []
    for idx, ball in bag.open_bag()["pokemon"]:
        if isinstance(ball, Pokeball):
            pokemon = ball.get_pokemon()
            if pokemon and pokemon != current_pokemon and not pokemon.is_fainted():
                switch_options.append((idx, pokemon))
    
    if not switch_options:
        print("No other available Pokemon to switch to!")
        return False
    
    for i, (idx, pokemon) in enumerate(switch_options):
        print(f"{i + 1}. {pokemon.name} (HP: {pokemon.current_health}/{pokemon.max_health})")
    
    choice = input(f"Enter Pokemon number (1-{len(switch_options)}) or 0 to cancel: ")
    if choice == "0":
        return False
    
    try:
        switch_idx = int(choice) - 1
        if 0 <= switch_idx < len(switch_options):
            idx, _ = switch_options[switch_idx]
            result = bag.switch_pokemon(idx)
            print(result["message"])
            return True
        else:
            print("Invalid choice!")
    except ValueError:
        print("Please enter a number.")
    return False

def get_viable_pokemon(bag):
    viable_pokemon = []
    for idx, ball in bag.open_bag()["pokemon"]:
        if isinstance(ball, Pokeball):
            pokemon = ball.get_pokemon()
            if pokemon and not pokemon.is_fainted():
                viable_pokemon.append((idx, pokemon))
    return viable_pokemon

def force_switch_pokemon(bag, viable_pokemon):
    print("\nYou must switch to another Pokemon!")
    for i, (idx, pokemon) in enumerate(viable_pokemon):
        print(f"{i + 1}. {pokemon.name} (HP: {pokemon.current_health}/{pokemon.max_health})")
    
    while True:
        choice = input(f"Choose Pokemon (1-{len(viable_pokemon)}): ")
        try:
            idx_choice = int(choice) - 1
            if 0 <= idx_choice < len(viable_pokemon):
                idx, _ = viable_pokemon[idx_choice]
                result = bag.switch_pokemon(idx)
                if result["success"]:
                    print(result["message"])
                    return True
            else:
                print("Invalid choice. You must select a Pokemon.")
        except ValueError:
            print("Please enter a number.")

def main():
    bag = Bag()

    # Add items to the bag
    bag.add_item(PotionFlyweightFactory.get_small_potion())
    bag.add_item(PotionFlyweightFactory.get_medium_potion())
    bag.add_item(RegularPokeball())
    bag.add_item(GreatBall())
    bag.add_item(MasterBall())

    print("Welcome to Pokemon Battle Simulator!")
    print("Choose your starter Pokemon:")
    
    # Use the factory to create starter options
    starter_options = PokemonFactory.create_starter_pokemon()
    for idx, pokemon in enumerate(starter_options, 1):
        print(f"{idx}. {pokemon.name}")

    starter = None
    while not starter:
        choice = input("Enter your choice (1-3): ")
        if choice in ["1", "2", "3"]:
            starter = PokemonFactory.create_pokemon(["Charmander", "Squirtle", "Bulbasaur"][int(choice) - 1])
        else:
            print("Invalid choice. Please enter 1, 2, or 3.")

    starter_ball = RegularPokeball()
    starter_ball.catch(starter)
    starter_ball.set_active(True)
    # Directly add to the Pokemon compartment for the initial Pokemon
    bag.compartments["pokemon"].add(starter_ball)

    print(f"You chose {starter.name}! Your adventure begins now.")

    print("Choose a second Pokemon:")
    for idx, pokemon in enumerate(starter_options, 1):
        print(f"{idx}. {pokemon.name}")

    second = None
    while not second:
        choice = input("Enter your choice (1-3): ")
        if choice in ["1", "2", "3"]:
            second = PokemonFactory.create_pokemon(["Charmander", "Squirtle", "Bulbasaur"][int(choice) - 1])
        else:
            print("Invalid choice. Please enter 1, 2, or 3.")

    second_ball = RegularPokeball()
    second_ball.catch(second)
    # Directly add to the Pokemon compartment for the second Pokemon
    bag.compartments["pokemon"].add(second_ball)

    print(f"You also received {second.name}!")

    battle_count = wins = losses = escapes = 0
    while True:
        print("\n----- CURRENT STATUS -----")
        active_pokemon = bag.get_active_pokemon()

        if not active_pokemon:
            # If no active Pokemon, set the first one as active
            for item in bag.compartments["pokemon"].items:
                if isinstance(item, Pokeball) and not item.is_empty():
                    item.set_active(True)
                    active_pokemon = item.get_pokemon()
                    print(f"Setting {active_pokemon.name} as your active Pokemon!")
                    break

        if active_pokemon:
            print(f"Active Pokemon: {active_pokemon.name} (HP: {active_pokemon.current_health}/{active_pokemon.max_health})")
        else:
            print("No active Pokemon")

        print(f"Potions: {bag.count_items('potion')}")
        print(f"Pokeballs: {bag.count_items('pokeballs')}")
        print(f"Pokemon: {bag.count_items('pokemon')}")

        # Create a random wild Pokemon
        wild_options = ["Charmander", "Squirtle", "Bulbasaur"]
        wild_pokemon = PokemonFactory.create_pokemon(random.choice(wild_options))
        
        # Randomize wild Pokemon level
        wild_level = random.randint(1, 3)
        for _ in range(wild_level - 1):
            wild_pokemon.xp += 30  # This will trigger level up check
            wild_pokemon.level_up_check()

        result = battle_loop(bag, wild_pokemon)
        battle_count += 1

        if result is True:
            wins += 1
            # Heal Pokemon a bit after winning
            for poke_ball in bag.compartments["pokemon"].items:
                pokemon = poke_ball.get_pokemon()
                if pokemon:
                    heal_amount = pokemon.max_health // 4
                    pokemon.current_health = min(pokemon.current_health + heal_amount, pokemon.max_health)
        elif result is False:
            losses += 1
            # Fully heal Pokemon after losing
            for poke_ball in bag.compartments["pokemon"].items:
                pokemon = poke_ball.get_pokemon()
                if pokemon:
                    pokemon.current_health = pokemon.max_health
        elif result is None:
            escapes += 1

        cont = input("\nBattle again? (y/n): ")
        if cont.lower() != "y":
            break

    print("\nThanks for playing!")
    print("----- BATTLE SUMMARY -----")
    print(f"Total battles: {battle_count}")
    print(f"Wins: {wins}")
    print(f"Losses: {losses}")
    print(f"Escapes: {escapes}")
    print(f"Pokemon in your collection: {bag.count_items('pokemon')}")

if __name__ == "__main__":
    main()